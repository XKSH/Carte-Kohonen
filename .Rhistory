m=rep(0,n)
for (k in 1:n)
{
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=-1))
m[k]<-which(dista==min(dista))[1]
}
return(m) # Vecteur des neurones vainqueurs
}
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
kohonenqualigo<-function(seed,nr,nc,alpha0,alphaT,beta0,betaT,dat,n)
# seed, dim carte 1, dim carte 2, taux d'apprentissage initial, final, rayon d'apprentissage initial, final, table des données, nombre d'observations lues, type de pas DTW, contrainte de fenêtre DTW
{
base.test=as.matrix(dat[1:n,]) # x=colonne PCO
set.seed(seed)
beta=para.expo(beta0,betaT,n)
alpha=para.expo(alpha0,alphaT,n)
# Initialisation aléatoire des vecteurs poids
profils=matrix(runif(dim(base.test)[2]*nr*nc,0,1),ncol=dim(base.test)[2])
# Construction de la matrice de voisinage
neighboo=vois.constr(nr, nc, beta[1])
b=beta[1]
# Entraînement du réseau Konohen
for (k in 1:n)
{
if (beta[k]%/%1!=b%/%1) {neighboo=vois.constr(nr, nc, beta[k])}
# On regarde si la décroissance de béta impacte le nombre de voisins
b=beta[k]
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=0.5))
m<-which(dista==min(dista))[1] # Recherche du min de ces distances;si pas unique, on choisit 1er
#print(profils)
# nf?
nf=1
#nf=exp(-apply(profils, 1, function(x, y=profils) dist(rbind(y[m,], x))/(beta[k]^2)))
# Renovellement de l'unité gagante et son voisin
updt=t((base.test[k,]-t(profils)))*alpha[k]*nf*neighboo[,m]
updt[is.na(updt)==TRUE]=0
profils=profils+updt
}
return(profils)
}
# Locations des individus et variables sur la carte
kohonenqualiclass<-function(profils,dat,n)
{
base.test=as.matrix(dat[1:n,])
m=rep(0,n)
for (k in 1:n)
{
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=0.5))
m[k]<-which(dista==min(dista))[1]
}
return(m) # Vecteur des neurones vainqueurs
}
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
kohonenqualigo<-function(seed,nr,nc,alpha0,alphaT,beta0,betaT,dat,n)
# seed, dim carte 1, dim carte 2, taux d'apprentissage initial, final, rayon d'apprentissage initial, final, table des données, nombre d'observations lues, type de pas DTW, contrainte de fenêtre DTW
{
base.test=as.matrix(dat[1:n,]) # x=colonne PCO
set.seed(seed)
beta=para.expo(beta0,betaT,n)
alpha=para.expo(alpha0,alphaT,n)
# Initialisation aléatoire des vecteurs poids
profils=matrix(runif(dim(base.test)[2]*nr*nc,0,1),ncol=dim(base.test)[2])
# Construction de la matrice de voisinage
neighboo=vois.constr(nr, nc, beta[1])
b=beta[1]
# Entraînement du réseau Konohen
for (k in 1:n)
{
if (beta[k]%/%1!=b%/%1) {neighboo=vois.constr(nr, nc, beta[k])}
# On regarde si la décroissance de béta impacte le nombre de voisins
b=beta[k]
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=3))
m<-which(dista==min(dista))[1] # Recherche du min de ces distances;si pas unique, on choisit 1er
#print(profils)
# nf?
nf=1
#nf=exp(-apply(profils, 1, function(x, y=profils) dist(rbind(y[m,], x))/(beta[k]^2)))
# Renovellement de l'unité gagante et son voisin
updt=t((base.test[k,]-t(profils)))*alpha[k]*nf*neighboo[,m]
updt[is.na(updt)==TRUE]=0
profils=profils+updt
}
return(profils)
}
# Locations des individus et variables sur la carte
kohonenqualiclass<-function(profils,dat,n)
{
base.test=as.matrix(dat[1:n,])
m=rep(0,n)
for (k in 1:n)
{
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=3))
m[k]<-which(dista==min(dista))[1]
}
return(m) # Vecteur des neurones vainqueurs
}
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
kohonenqualigo<-function(seed,nr,nc,alpha0,alphaT,beta0,betaT,dat,n)
# seed, dim carte 1, dim carte 2, taux d'apprentissage initial, final, rayon d'apprentissage initial, final, table des données, nombre d'observations lues, type de pas DTW, contrainte de fenêtre DTW
{
base.test=as.matrix(dat[1:n,]) # x=colonne PCO
set.seed(seed)
beta=para.expo(beta0,betaT,n)
alpha=para.expo(alpha0,alphaT,n)
# Initialisation aléatoire des vecteurs poids
profils=matrix(runif(dim(base.test)[2]*nr*nc,0,1),ncol=dim(base.test)[2])
# Construction de la matrice de voisinage
neighboo=vois.constr(nr, nc, beta[1])
b=beta[1]
# Entraînement du réseau Konohen
for (k in 1:n)
{
if (beta[k]%/%1!=b%/%1) {neighboo=vois.constr(nr, nc, beta[k])}
# On regarde si la décroissance de béta impacte le nombre de voisins
b=beta[k]
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=1.5))
m<-which(dista==min(dista))[1] # Recherche du min de ces distances;si pas unique, on choisit 1er
#print(profils)
# nf?
nf=1
#nf=exp(-apply(profils, 1, function(x, y=profils) dist(rbind(y[m,], x))/(beta[k]^2)))
# Renovellement de l'unité gagante et son voisin
updt=t((base.test[k,]-t(profils)))*alpha[k]*nf*neighboo[,m]
updt[is.na(updt)==TRUE]=0
profils=profils+updt
}
return(profils)
}
# Locations des individus et variables sur la carte
kohonenqualiclass<-function(profils,dat,n)
{
base.test=as.matrix(dat[1:n,])
m=rep(0,n)
for (k in 1:n)
{
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=1.5))
m[k]<-which(dista==min(dista))[1]
}
return(m) # Vecteur des neurones vainqueurs
}
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
kohonenqualigo<-function(seed,nr,nc,alpha0,alphaT,beta0,betaT,dat,n)
# seed, dim carte 1, dim carte 2, taux d'apprentissage initial, final, rayon d'apprentissage initial, final, table des données, nombre d'observations lues, type de pas DTW, contrainte de fenêtre DTW
{
base.test=as.matrix(dat[1:n,]) # x=colonne PCO
set.seed(seed)
beta=para.expo(beta0,betaT,n)
alpha=para.expo(alpha0,alphaT,n)
# Initialisation aléatoire des vecteurs poids
profils=matrix(runif(dim(base.test)[2]*nr*nc,0,1),ncol=dim(base.test)[2])
# Construction de la matrice de voisinage
neighboo=vois.constr(nr, nc, beta[1])
b=beta[1]
# Entraînement du réseau Konohen
for (k in 1:n)
{
if (beta[k]%/%1!=b%/%1) {neighboo=vois.constr(nr, nc, beta[k])}
# On regarde si la décroissance de béta impacte le nombre de voisins
b=beta[k]
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=2))
m<-which(dista==min(dista))[1] # Recherche du min de ces distances;si pas unique, on choisit 1er
#print(profils)
# nf?
nf=1
#nf=exp(-apply(profils, 1, function(x, y=profils) dist(rbind(y[m,], x))/(beta[k]^2)))
# Renovellement de l'unité gagante et son voisin
updt=t((base.test[k,]-t(profils)))*alpha[k]*nf*neighboo[,m]
updt[is.na(updt)==TRUE]=0
profils=profils+updt
}
return(profils)
}
# Locations des individus et variables sur la carte
kohonenqualiclass<-function(profils,dat,n)
{
base.test=as.matrix(dat[1:n,])
m=rep(0,n)
for (k in 1:n)
{
dista=apply(profils, 1, function(x, y=base.test) dist(rbind(y[k,],x),method = "minkowski",p=2))
m[k]<-which(dista==min(dista))[1]
}
return(m) # Vecteur des neurones vainqueurs
}
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
test=read.csv("D:\Profiles\XU\Desktop\quan&qual.test.csv",header=TRUE)
test=read.csv("D:/Profiles/XU/Desktop/quan&qual.test.csv",header=TRUE)
test=read.csv("D:/Profiles/XU/Desktop/quan&qual/test.csv",header=TRUE)
test=read.csv("D:/Profiles/XU/Desktop/quan&qual/test.csv",header=TRUE)
View(test)
profils=matrix(runif(dim(base.test)[2]*nr*nc,0,1),ncol=dim(base.test)[2])
profils=matrix(runif(dim(test)[2]*nr*nc,0,1),ncol=dim(test)[2])
nr=nc=8
source("Kohonenprep.R")
source("Kohonennet.R")
source("plotcarte1.R")
source("evaluation.R")
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
matd=test
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
library(FactoClass)
# Introduire les donées:
heart.data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
chclass <-c("numeric","factor","factor","numeric","numeric","factor","factor","numeric","factor","numeric","factor","factor","factor","factor")
heart.data[,14][heart.data[,14] > 0] <- 1
# La conversion de variable
convert.magic <- function(obj, types){
out <- lapply(1:length(obj),FUN = function(i){FUN1 <- switch(types[i],character = as.character,numeric = as.numeric,factor = as.factor); FUN1(obj[,i])})
names(out) <- colnames(obj)
data.frame(out,stringsAsFactors = FALSE)
}
heart.data <- convert.magic(heart.data,chclass)
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart=heart.data[c(1,4,5,8,10,2:3,6:7,9,11:14)]
names(heart)=names(heart.data)[c(1,4,5,8,10,2:3,6:7,9,11:14)]
heart=heart[complete.cases(heart),]
View(heart)
length(which(heart[,15]==1))
length(which(heart[,14]==1))
137/303
source("Kohonenprep.R")
source("Kohonennet.R")
source("plotcarte1.R")
source("evaluation.R")
pop.var=function(x){sum((x - mean(x))^2) / length(x)}
tw.heart=heart
tw.heart[,1:5]=scale(tw.heart[,1:5])
#Utiliser la métrique de Ming-Yi Shih(2010) pour données mixtes
nl=data.frame(lapply(tw.heart[,6:13], nlevels))
#Determiner l'attribut qualitative de base
base.attr=tw.heart[,5+which(nl[1,]==max(nl[1,]))[1]]
ssw=colSums(apply(data.frame(tw.heart[,1:5]),2,function(x) tapply(x,base.attr,pop.var)))
#Determiner l'attribut numérique de base
base.num=tw.heart[,which(ssw==min(ssw))]
v=matrix(tapply(base.num,base.attr,mean))
disj=as.matrix(acm.disjonctif(heart[,6:13]))
burt=t(disj)%*%disj
tw.burt=burt[c(1:2,7:nrow(burt)),3:6]
nom=matrix(rep(rowSums(tw.burt),ncol(tw.burt)),ncol=ncol(tw.burt))+t(matrix(rep(t(colSums(tw.burt)),nrow(tw.burt)),ncol=nrow(tw.burt)))
nom=nom-tw.burt
a=tw.burt/nom
w=a%*%v
w=c(w[1:2],v,w[3:length(w)])
vm=t(disj*w)
vm=matrix(vm[vm!=0],nrow=8)
vm=t(vm)
# La métrique de shin
tw.heart[,6:13]=vm
tw.heart1=tw.heart[,c(1:13)]
tw.heart1=do.call(cbind,tw.heart1)
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
set.seed(20)
sample(30,which(heart[,14]==1))
which(heart[,14]==1)
set.seed(20)
tw.heart1=rbind(tw.heart1,tw.heart1[sample(which(heart[,14]==1),30),])
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
m
htw.clust=cbind(tw.heart,m[1:297])[order(m[1:297]),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
set.seed(20)
tw.heart1=tw.heart[,c(1:13)]
tw.heart1=do.call(cbind,tw.heart1)
tw.heart1=rbind(tw.heart1,tw.heart1[sample(which(heart[,14]==1),20),])
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m[1:297])[order(m[1:297]),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
library(FactoClass)
# Introduire les donées:
heart.data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",header=FALSE,sep=",",na.strings = '?')
chclass <-c("numeric","factor","factor","numeric","numeric","factor","factor","numeric","factor","numeric","factor","factor","factor","factor")
heart.data[,14][heart.data[,14] > 0] <- 1
# La conversion de variable
convert.magic <- function(obj, types){
out <- lapply(1:length(obj),FUN = function(i){FUN1 <- switch(types[i],character = as.character,numeric = as.numeric,factor = as.factor); FUN1(obj[,i])})
names(out) <- colnames(obj)
data.frame(out,stringsAsFactors = FALSE)
}
heart.data <- convert.magic(heart.data,chclass)
names(heart.data) <- c( "age", "sex", "cp", "trestbps", "chol","fbs", "restecg",
"thalach","exang", "oldpeak","slope", "ca", "thal", "num")
heart=heart.data[c(1,4,5,8,10,2:3,6:7,9,11:14)]
names(heart)=names(heart.data)[c(1,4,5,8,10,2:3,6:7,9,11:14)]
heart=heart[complete.cases(heart),]
source("Kohonenprep.R")
source("Kohonennet.R")
source("plotcarte1.R")
source("evaluation.R")
pop.var=function(x){sum((x - mean(x))^2) / length(x)}
tw.heart=heart
tw.heart[,1:5]=scale(tw.heart[,1:5])
#Utiliser la métrique de Ming-Yi Shih(2010) pour données mixtes
nl=data.frame(lapply(tw.heart[,6:13], nlevels))
#Determiner l'attribut qualitative de base
base.attr=tw.heart[,5+which(nl[1,]==max(nl[1,]))[1]]
ssw=colSums(apply(data.frame(tw.heart[,1:5]),2,function(x) tapply(x,base.attr,pop.var)))
#Determiner l'attribut numérique de base
base.num=tw.heart[,which(ssw==min(ssw))]
v=matrix(tapply(base.num,base.attr,mean))
disj=as.matrix(acm.disjonctif(heart[,6:13]))
burt=t(disj)%*%disj
tw.burt=burt[c(1:2,7:nrow(burt)),3:6]
nom=matrix(rep(rowSums(tw.burt),ncol(tw.burt)),ncol=ncol(tw.burt))+t(matrix(rep(t(colSums(tw.burt)),nrow(tw.burt)),ncol=nrow(tw.burt)))
nom=nom-tw.burt
a=tw.burt/nom
w=a%*%v
w=c(w[1:2],v,w[3:length(w)])
vm=t(disj*w)
vm=matrix(vm[vm!=0],nrow=8)
vm=t(vm)
# La métrique de shin
tw.heart[,6:13]=vm
tw.heart1=tw.heart[,c(1:13)]
tw.heart1=do.call(cbind,tw.heart1)
matd=matrix(rep(c(tw.heart1),60),ncol=dim(tw.heart1)[2], byrow=T)
nr=8;nc=8
source("Kohonennet.R")
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
w=c(1.5,1,1,2,2,1,2,0.1,0.1,2,2,3,3)#c(1.5,1,1,2,2,1.5,2,1,1,2,2,2,2)#,rep(5/10,8))
matd=matrix(rep(c(tw.heart1),10),ncol=dim(tw.heart1)[2], byrow=T)
prof=kohonenqualigo.weight(17,nr,nc,0.04,0.01,2.99,0.5,matd[sample(nrow(matd)),],dim(matd)[1],w)
m=kohonenqualiclass.weight(prof,tw.heart1,dim(tw.heart1)[1],w)
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
kohonenqualigo.weight<-function(seed,nr,nc,alpha0,alphaT,beta0,betaT,dat,n,w)
# seed, dim carte 1, dim carte 2, taux d'apprentissage initial, final, rayon d'apprentissage initial, final, table des données, nombre d'observations lues, type de pas DTW, contrainte de fenêtre DTW
{
base.test=as.matrix(dat[1:n,]) # x=colonne PCO
set.seed(seed)
beta=para.expo(beta0,betaT,n)
alpha=para.expo(alpha0,alphaT,n)
# Initialisation aléatoire des vecteurs poids
profils=matrix(runif(dim(base.test)[2]*nr*nc,0,1),ncol=dim(base.test)[2])
# Construction de la matrice de voisinage
neighboo=vois.constr(nr, nc, beta[1])
b=beta[1]
# Entraînement du réseau Konohen
for (k in 1:n)
{
if (beta[k]%/%1!=b%/%1) {neighboo=vois.constr(nr, nc, beta[k])}
# On regarde si la décroissance de béta impacte le nombre de voisins
b=beta[k]
dista=apply(profils, 1, function(x, y=base.test) dist.weight(y[k,],x,w))
m<-which(dista==min(dista))[1] # Recherche du min de ces distances;si pas unique, on choisit 1er
#print(profils)
# nf?
nf=exp(-apply(profils, 1, function(x, y=profils) dist.weight(y[m,], x,w)/(beta[k]^2)))
# Renovellement de l'unité gagante et son voisin
updt=t((base.test[k,]-t(profils)))*alpha[k]*nf*neighboo[,m]
updt[is.na(updt)==TRUE]=0
profils=profils+updt
}
return(profils)
}
# Locations des individus et variables sur la carte
kohonenqualiclass.weight<-function(profils,dat,n,w)
{
base.test=as.matrix(dat[1:n,])
m=rep(0,n)
for (k in 1:n)
{
dista=apply(profils, 1, function(x, y=base.test) dist.weight(y[k,],x,w))
m[k]<-which(dista==min(dista))
}
return(m) # Vecteur des neurones vainqueurs
}
w=c(1.5,1,1,2,2,1,2,0.1,0.1,2,2,3,3)#c(1.5,1,1,2,2,1.5,2,1,1,2,2,2,2)#,rep(5/10,8))
matd=matrix(rep(c(tw.heart1),10),ncol=dim(tw.heart1)[2], byrow=T)
prof=kohonenqualigo.weight(17,nr,nc,0.04,0.01,2.99,0.5,matd[sample(nrow(matd)),],dim(matd)[1],w)
m=kohonenqualiclass.weight(prof,tw.heart1,dim(tw.heart1)[1],w)
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
dist.weight=function(x,y,weight){
newx=x*sqrt(weight)
newy=y*sqrt(weight)
distw=dist(rbind(t(newx),t(newy)))
distw
}
w=c(1.5,1,1,2,2,1,2,0.1,0.1,2,2,3,3)#c(1.5,1,1,2,2,1.5,2,1,1,2,2,2,2)#,rep(5/10,8))
matd=matrix(rep(c(tw.heart1),10),ncol=dim(tw.heart1)[2], byrow=T)
prof=kohonenqualigo.weight(17,nr,nc,0.04,0.01,2.99,0.5,matd[sample(nrow(matd)),],dim(matd)[1],w)
m=kohonenqualiclass.weight(prof,tw.heart1,dim(tw.heart1)[1],w)
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
require(GrowingSOM)
sFr=0.95
tw.heart1=tw.heart[,c(1:13)]
gsom_cleve <- train.gsom(tw.heart1,spreadFactor=sFr, keepdata=TRUE, iterations=60,
alpha=0.5, gridsize = FALSE, nhood= "rect")
m.g=kohonenqualiclass(gsom_cleve$nodes$codes,tw.heart1,dim(tw.heart1)[1])
htw.clust.g=cbind(heart,m.g)[order(m.g),]
table(htw.clust.g[,ncol(htw.clust.g)-1],htw.clust.g[,ncol(htw.clust.g)])
nmi(table(htw.clust.g[,ncol(htw.clust.g)-1],htw.clust.g[,ncol(htw.clust.g)]))
purity(table(htw.clust.g[,ncol(htw.clust.g)-1],htw.clust.g[,ncol(htw.clust.g)]))
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,2.5,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,2.8,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
nr=8;nc=8
prof=kohonenqualigo(17,nr,nc,0.4,0.1,3,3,matd[sample(nrow(matd)),],dim(matd)[1])
m=kohonenqualiclass(prof,tw.heart1,dim(tw.heart1)[1])
htw.clust=cbind(tw.heart,m)[order(m),]
table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)])
nmi(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
purity(table(htw.clust[,ncol(htw.clust)-1],htw.clust[,ncol(htw.clust)]))
read.table(file = "D:/Profiles/XU/Desktop/data_avb.txt",header = TRUE,sep=",")
read.table(file = "D:/Profiles/XU/Desktop/data_avb.txt",header = TRUE,sep=",")
test=read.table(file = "D:/Profiles/XU/Desktop/data_avb.txt",header = TRUE,sep=",")
View(test)
test=read.table(file = "D:/Profiles/XU/Desktop/data_avb.txt",header = TRUE,sep="\t")
View(test)
rm(test)
this.dir <- dirname("parent.frame(2)$ofile")
setwd(this.dir)
test=read.table(file = "D:/Profiles/XU/Desktop/data_avb.txt",header = TRUE,sep="\t")
rm(test)
test=read.table(file = "data_avb.txt",header = TRUE,sep="\t")
getwd()
this.dir <- dirname("parent.frame(2)$ofile")
setwd(this.dir)
getwd()
